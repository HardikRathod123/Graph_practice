    typedef vector<int> var;
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        priority_queue<var, vector<var>, greater<var>> pq;
        pq.push({0, src, k + 1});
        vector<vector<pair<int, int>>> adj(n);
        for(int i = 0; i < flights.size(); i++){
                int first = flights[i][0];
                int second = flights[i][1];
                int cost = flights[i][2];
                adj[first].push_back({second, cost});
        }
        
        while(!pq.empty()){
            auto temp = pq.top();
            pq.pop();
            int weight = temp[0];
            int node = temp[1];
            int stop = temp[2];
            
            if(node == dst) return weight;
          
            if(stop > 0){
                for(auto nodes : adj[node]){
                    int cost = nodes.second;
                    int curr = nodes.first;
                    // dist[node] = min(dist[node], dist[curr] + cost);
                    pq.push({cost + weight, curr, stop - 1});
                }
            }
        }
        return -1;
    }
