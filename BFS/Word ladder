

int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<string> pq;
        set<string> mp;
        set<string> visited;
        for(auto s : wordList){
            mp.insert(s);
        }        
        pq.push(beginWord);
        visited.insert(beginWord);
        int counter = 0;
        
        while(!pq.empty()){
            int size = pq.size();
            counter++;
            for(int k = 0; k < size; k++){
                string s = pq.front();
                if(s == endWord) return counter;
                pq.pop();
                for(int i = 0; i < s.size(); i++){
                    string temp = s;
                    for(auto j = 'a';j <= 'z' ; j++){
                        temp[i] = j;
                        if(mp.count(temp) && !visited.count(temp)){
                            pq.push(temp);               
                            visited.insert(temp);
                        }
                    }
                }
            }
        }
        return pq.empty() ? 0 : counter;
    }
